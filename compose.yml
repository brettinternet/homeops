---
- name: Setup media services
  hosts: media
  tags: services
  vars:
    containers:
      - plex
      # - tautulli
      # - ombi
      - nzbget
      - sonarr
      - radarr
      - readarr
      # - lazylibrarian
      - calibre
      - calibre-web
    container_state: created
  roles:
    - role: podman_systemd
      vars:
        podman_systemd_action: remove
    - role: compose
    - role: podman_systemd
      vars:
        podman_systemd_action: generate

- name: Setup general services
  hosts: server
  tags: services
  vars:
    # Containers to use (roles/compose/tasks)
    containers:
      - adguard
      - home-assistant
      - espial
      # - gitea_db
      # - gitea
      - miniflux_db
      - miniflux
      # - mealie
      # - n8n_db
      # - n8n
      # - firefly_db
      # - firefly
      - healthchecks
      - change-detection
      # - epicgames
      # - scrutiny_web
      # - scrutiny_collector
      - minecraft
      - valheim
      # - valheim2
      # - syncthing
      # - prometheus
      # - grafana
      - crowdsec-cloudflare-bouncer
      - crowdsec-traefik-bouncer
      - crowdsec
      - oauth
      - traefik

    # absent - A container matching the specified name will be stopped and removed.
    # present - Asserts the existence of a container matching the name and any provided configuration parameters. If no container matches the name, a container will be created. If a container matches the name but the provided configuration does not match, the container will be updated, if it can be. If it cannot be updated, it will be removed and re-created with the requested config. Image version will be taken into account when comparing configuration. Use the recreate option to force the re-creation of the matching container.
    # started - Asserts there is a running container matching the name and any provided configuration. If no container matches the name, a container will be created and started. Use recreate to always re-create a matching container, even if it is running. Use force_restart to force a matching container to be stopped and restarted.
    # stopped - Asserts that the container is first present, and then if the container is running moves it to a stopped state.
    # created - (new feature) just created the image since our podman_systemd role will start the image with systemd
    container_state: created
    # container_recreate: true

    # Traefik middleware, scrutiny_collector
    ingress_local_ip: "{{ hostvars['server']['ansible_host'] }}"

    # Containers with a frontend to use with Traefik (roles/traefik/templates)
    frontend_containers:
      # media
      - name: plex
        host: media
      # - name: tautulli
      #   host: media
      # - name: ombi
      #   host: media
      - name: nzbget
        host: media
      - name: sonarr
        host: media
      - name: radarr
        host: media
      - name: readarr
        host: media
      - name: calibre
        host: media
      - name: calibre-web
        host: media
      # server (needs a better name...)
      - name: adguard
        host: server
      - name: espial
        host: server
      - name: change-detection
        host: server
      # - name: gitea
      #   host: server
      - name: miniflux
        host: server
      # - name: mealie
      #   host: server
      # - name: n8n
      #   host: server
      # - name: firefly
      #   host: server
      - name: healthchecks
        host: server
      - name: home-assistant
        host: server
      # - name: syncthing
      #   host: server
      # - name: prometheus
      #   host: server
      # - name: grafana
      #   host: server
      - name: oauth
        host: server
      - name: traefik
        host: server

    # Systemd user setup for podman containers - default setup/teardown depends on `container_state` var
    # podman_systemd_action: remove
    # NOTE: if changes are made to images in `compose/tasks` then you must stop/remove the systemd unit files, recreate the images, and force regenerate the unit files,
    # or else systemd will use stale start commands
    # podman_systemd_force_regenerate: true
  roles:
    - role: podman_systemd
      vars:
        podman_systemd_action: remove
    - role: traefik
      tags: traefik
      when: "'traefik' in containers"
    - role: compose
    - role: podman_systemd
      vars:
        podman_systemd_action: generate

- name: Setup host routing
  hosts: server
  tags:
    - services
    - routing
  roles:
    - role: ingress
      vars:
        # ingress__iptables_flush: true
        # ingress__enable_forwarding: false
