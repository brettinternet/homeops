---
version: "3.7"

networks:
  traefik_proxy:
    name: traefik_proxy
    driver: bridge
    external: true

services:
  traefik:
    image: traefik
    container_name: traefik
    restart: unless-stopped
    networks:
      - traefik_proxy
    environment:
      - TZ=${TZ}
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${APPDATA_DIR}/traefik:/etc/traefik:rw
    ports:
      - "${NETWORK_BIND_ADDR}:80:80"
      - "${NETWORK_BIND_ADDR}:443:443"
    command:
      - "--logLevel=INFO"
      - "--api"
      - "--defaultentrypoints=http,https"
      - "--entrypoints=Name:http Address::80 Compress:true ForwardedHeaders.TrustedIPs:10.0.0.2 Redirect.EntryPoint:https"
      - "--entrypoints=Name:https Address::443 TLS Compress:true ForwardedHeaders.TrustedIPs:10.0.0.2 TLS.SniStrict:true TLS.MinVersion:VersionTLS12 CipherSuites:TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"
      - "--acme"
      - "--acme.storage=/etc/traefik/acme.json"
      - "--acme.entryPoint=https"
      - "--acme.dnsChallenge=true"
      - "--acme.dnsChallenge.provider=cloudflare"
      - "--acme.dnsChallenge.delayBeforeCheck=60"
      - "--acme.dnsChallenge.resolvers=1.1.1.1,1.0.0.1"
      - "--acme.onHostRule=true"
      - "--acme.email=${CLOUDFLARE_EMAIL}"
      - "--acme.acmeLogging=true"
      # - "--acme.domains=${ROOT_DOMAIN},*.${ROOT_DOMAIN},"
      - "--acme.domains=*.${ROOT_DOMAIN},"
      - "--acme.KeyType=RSA4096"
      - "--docker"
      - "--docker.domain=${ROOT_DOMAIN}"
      - "--docker.watch"
      - "--docker.exposedbydefault=false"
      - "--retry"
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      traefik.backend: traefik
      traefik.port: 8080
      traefik.frontend.rule: Host:traefik.${ROOT_DOMAIN}
      traefik.frontend.headers.SSLRedirect: true
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.browserXSSFilter: true
      traefik.frontend.headers.contentTypeNosniff: true
      traefik.frontend.headers.forceSTSHeader: true
      traefik.frontend.headers.STSIncludeSubdomains: true
      traefik.frontend.headers.STSPreload: true
      traefik.frontend.headers.customResponseHeaders: X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex
      traefik.frontend.headers.frameDeny: true
      # traefik.frontend.auth.basic.users: ${HTPASSWD}
      # add this to any containers you want to protect (if possible, sometimes mobile apps dont work)
      traefik.frontend.auth.forward.address: http://oauth:4181
      traefik.frontend.auth.forward.authResponseHeaders: X-Forwarded-User
      traefik.frontend.auth.forward.trustForwardHeader: true

  # https://github.com/thomseddon/traefik-forward-auth
  oauth:
    # https://hub.docker.com/r/thomseddon/traefik-forward-auth
    image: thomseddon/traefik-forward-auth
    container_name: oauth
    restart: unless-stopped
    networks:
      - traefik_proxy
    environment:
      - CLIENT_ID=${OAUTH_CLIENT_ID}
      - CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
      - SECRET=${OAUTH_SECRET}
      - INSECURE_COOKIE=false
      - COOKIE_DOMAIN=${ROOT_DOMAIN}
      - AUTH_HOST=oauth.${ROOT_DOMAIN}
      - WHITELIST=${OAUTH_WHITELIST}
      - LOG_LEVEL=warn
      - LOG_FORMAT=text
    ports:
      - "4181:4181"
    labels:
      traefik.enable: true
      traefik.backend: oauth
      traefik.frontend.rule: Host:oauth.${ROOT_DOMAIN}
      traefik.port: 4181
      traefik.docker.network: traefik_proxy
      traefik.frontend.headers.SSLRedirect: true
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.browserXSSFilter: true
      traefik.frontend.headers.contentTypeNosniff: true
      traefik.frontend.headers.forceSTSHeader: true
      traefik.frontend.headers.STSIncludeSubdomains: true
      traefik.frontend.headers.STSPreload: true
      traefik.frontend.headers.customResponseHeaders: X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex
      traefik.frontend.headers.frameDeny: true
      traefik.frontend.auth.forward.address: http://oauth:4181
      traefik.frontend.auth.forward.authResponseHeaders: X-Forwarded-User
      traefik.frontend.auth.forward.trustForwardHeader: true

  # https://github.com/plexinc/pms-docker
  plex:
    # https://hub.docker.com/r/plexinc/pms-docker
    image: plexinc/pms-docker
    container_name: plex
    hostname: ${PLEX_HOSTNAME}
    restart: unless-stopped
    networks:
      - traefik_proxy
    environment:
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
      - TZ=${TZ}
      - PLEX_CLAIM=${PLEX_CLAIM_CODE}
      # Remote access will look at `ADVERTISE_IP`, but because it's behind a proxy, it's likely that
      # the dashboard will say "Not available outside your network" even though it is... >:(
      - ADVERTISE_IP=https://plex.${ROOT_DOMAIN}:443
    volumes:
      - ${APPDATA_DIR}/plex:/config
      - ${STORAGE_DIR}/music:/data/Music
      - ${STORAGE_DIR}/movies:/data/Movies
      - ${STORAGE_DIR}/tv:/data/TV
      # - ${STORAGE_DIR}/tmp/transcode:/transcode
      - /tmp:/transcode
    ports:
      # Plex ports - source: https://support.plex.tv/articles/201543147-what-network-ports-do-i-need-to-allow-through-my-firewall/
      - "32400:32400" # Plex Media Server
      - "3005:3005" # Plex Companion
      - "8324:8324" # Roku via Plex Companion
      - "32469:32649" # Plex DLNA Server
      - "1900:1900/udp" # Plex DLNA Server
      - "32410:32410/udp" # network discovery
      - "32412:32412/udp" # network discovery
      - "32413:32413/udp" # network discovery
      - "32414:32414/udp" # network discovery
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      traefik.backend: plex
      traefik.port: 32400
      traefik.frontend.rule: Host:plex.${ROOT_DOMAIN}
      traefik.frontend.headers.SSLRedirect: true
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.browserXSSFilter: true
      traefik.frontend.headers.contentTypeNosniff: true
      traefik.frontend.headers.forceSTSHeader: true
      traefik.frontend.headers.SSLHost: plex.${ROOT_DOMAIN}
      traefik.frontend.headers.STSIncludeSubdomains: true
      traefik.frontend.headers.STSPreload: true
      traefik.frontend.headers.frameDeny: true

  # https://github.com/linuxserver/docker-ombi
  ombi:
    # https://hub.docker.com/r/linuxserver/ombi
    image: linuxserver/ombi
    container_name: ombi
    restart: unless-stopped
    networks:
      - traefik_proxy
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
    volumes:
      - ${APPDATA_DIR}/ombi:/config
    ports:
      - "3579:3579"
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      traefik.backend: ombi
      traefik.port: 3579
      traefik.frontend.rule: Host:request.${ROOT_DOMAIN}
      traefik.frontend.headers.SSLRedirect: true
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.browserXSSFilter: true
      traefik.frontend.headers.contentTypeNosniff: true
      traefik.frontend.headers.forceSTSHeader: true
      traefik.frontend.headers.STSIncludeSubdomains: true
      traefik.frontend.headers.STSPreload: true
      traefik.frontend.headers.frameDeny: true

  # https://github.com/Tautulli/Tautulli-Docker
  tautulli:
    # https://hub.docker.com/r/tautulli/tautulli
    image: tautulli/tautulli
    container_name: tautulli
    restart: unless-stopped
    networks:
      - traefik_proxy
    environment:
      - TZ=${TZ}
      - PGID=${PGID}
      - PUID=${PUID}
    volumes:
      - ${APPDATA_DIR}/tautulli:/config
      - ${APPDATA_DIR}/plex/Library/Application Support/Plex Media Server/Logs:/plex_logs:ro
    ports:
      - "8181:8181"
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      traefik.backend: plexpy
      traefik.port: 8181
      traefik.frontend.rule: Host:plexpy.${ROOT_DOMAIN}
      traefik.frontend.headers.SSLRedirect: true
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.browserXSSFilter: true
      traefik.frontend.headers.contentTypeNosniff: true
      traefik.frontend.headers.forceSTSHeader: true
      traefik.frontend.headers.STSIncludeSubdomains: true
      traefik.frontend.headers.STSPreload: true
      traefik.frontend.headers.frameDeny: true
      traefik.frontend.auth.forward.address: http://oauth:4181
      traefik.frontend.auth.forward.authResponseHeaders: X-Forwarded-User
      traefik.frontend.auth.forward.trustForwardHeader: true

  # https://github.com/linuxserver/docker-nzbget
  nzbget:
    # https://hub.docker.com/r/linuxserver/nzbget
    image: linuxserver/nzbget
    container_name: nzbget
    restart: unless-stopped
    networks:
      - traefik_proxy
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
    volumes:
      - ${APPDATA_DIR}/nzbget:/config
      - ${STORAGE_DIR}/downloads:/downloads
    ports:
      - "6788:6789"
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      traefik.docker.usebindportip: true # because we mapped specific port
      traefik.backend: nzbget
      traefik.frontend.rule: Host:nzbget.${ROOT_DOMAIN}
      traefik.frontend.headers.customFrameOptionsValue: ALLOW-FROM https://${ROOT_DOMAIN}
      traefik.frontend.headers.SSLRedirect: true
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.browserXSSFilter: true
      traefik.frontend.headers.contentTypeNosniff: true
      traefik.frontend.headers.forceSTSHeader: true
      traefik.frontend.headers.STSIncludeSubdomains: true
      traefik.frontend.headers.STSPreload: true
      traefik.frontend.headers.frameDeny: true

  # https://github.com/linuxserver/docker-sonarr
  sonarr:
    # https://hub.docker.com/r/linuxserver/sonarr
    image: linuxserver/sonarr
    container_name: sonarr
    restart: unless-stopped
    networks:
      - traefik_proxy
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
    volumes:
      - ${APPDATA_DIR}/sonarr:/config
      - ${STORAGE_DIR}/tv:/tv
      - ${STORAGE_DIR}/downloads:/downloads
    ports:
      - "8989:8989"
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      traefik.backend: sonarr
      traefik.port: 8989
      traefik.frontend.rule: Host:sonarr.${ROOT_DOMAIN}
      traefik.frontend.headers.SSLRedirect: true
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.browserXSSFilter: true
      traefik.frontend.headers.contentTypeNosniff: true
      traefik.frontend.headers.forceSTSHeader: true
      traefik.frontend.headers.STSIncludeSubdomains: true
      traefik.frontend.headers.STSPreload: true
      traefik.frontend.headers.frameDeny: true
      traefik.frontend.auth.forward.address: http://oauth:4181

  # https://github.com/linuxserver/docker-radarr
  radarr:
    # https://hub.docker.com/r/linuxserver/radarr
    image: linuxserver/radarr
    container_name: radarr
    restart: unless-stopped
    networks:
      - traefik_proxy
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
    volumes:
      - ${APPDATA_DIR}/radarr:/config
      - ${STORAGE_DIR}/movies:/movies
      - ${STORAGE_DIR}/downloads:/downloads
    ports:
      - "7878:7878"
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      traefik.backend: radarr
      traefik.port: 7878
      traefik.frontend.rule: Host:radarr.${ROOT_DOMAIN}
      traefik.frontend.headers.SSLRedirect: true
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.browserXSSFilter: true
      traefik.frontend.headers.contentTypeNosniff: true
      traefik.frontend.headers.forceSTSHeader: true
      traefik.frontend.headers.STSIncludeSubdomains: true
      traefik.frontend.headers.STSPreload: true
      traefik.frontend.headers.frameDeny: true
      traefik.frontend.auth.forward.address: http://oauth:4181

  hydra:
    image: linuxserver/hydra2
    container_name: hydra
    restart: unless-stopped
    networks:
      - traefik_proxy
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
    volumes:
      - ${APPDATA_DIR}/hydra:/config
      - ${STORAGE_DIR}/downloads:/downloads
    ports:
      - "5076:5076"
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      traefik.backend: hydra
      traefik.port: 5076
      traefik.frontend.rule: Host:hydra.${ROOT_DOMAIN}
      traefik.frontend.headers.SSLRedirect: true
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.browserXSSFilter: true
      traefik.frontend.headers.contentTypeNosniff: true
      traefik.frontend.headers.forceSTSHeader: true
      traefik.frontend.headers.STSIncludeSubdomains: true
      traefik.frontend.headers.STSPreload: true
      traefik.frontend.headers.frameDeny: true
      traefik.frontend.auth.forward.address: http://oauth:4181

  # https://github.com/portainer/portainer
  portainer:
    # https://hub.docker.com/r/portainer/portainer/
    image: portainer/portainer
    container_name: portainer
    restart: unless-stopped
    networks:
      - traefik_proxy
    command: -H unix:///var/run/docker.sock
    environment:
      - TZ=${TZ}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${APPDATA_DIR}/portainer:/data
    ports:
      - "9000:9000"
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      traefik.backend: portainer
      traefik.port: 9000
      traefik.frontend.rule: Host:portainer.${ROOT_DOMAIN}
      traefik.frontend.headers.SSLRedirect: true
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.browserXSSFilter: true
      traefik.frontend.headers.contentTypeNosniff: true
      traefik.frontend.headers.forceSTSHeader: true
      traefik.frontend.headers.STSIncludeSubdomains: true
      traefik.frontend.headers.STSPreload: true
      traefik.frontend.headers.frameDeny: true
      traefik.frontend.auth.forward.address: http://oauth:4181
      traefik.frontend.auth.forward.authResponseHeaders: X-Forwarded-User
      traefik.frontend.auth.forward.trustForwardHeader: true

  # https://github.com/containrrr/watchtower
  watchtower:
    # https://hub.docker.com/r/containrrr/watchtower
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    # TODO: add notifications - https://containrrr.github.io/watchtower/notifications/
    environment:
      - TZ=${TZ}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${APPDATA_DIR}/watchtower/config.json:/config.json
    command: --schedule "0 0 4 * * *" --cleanup
    # command: --interval 900 #15 minutes

  # https://github.com/linuxserver/docker-unifi-controller
  unifi:
    # https://hub.docker.com/r/linuxserver/unifi-controller
    image: linuxserver/unifi-controller
    container_name: unifi
    restart: unless-stopped
    networks:
      - traefik_proxy
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
      # - MEM_LIMIT=1024M #optional
    volumes:
      - ${APPDATA_DIR}/unifi:/config
    ports:
      - "3478:3478/udp" # Unifi communication port
      - "10001:10001/udp" # AP discovery
      - "8080:8080" # Unifi communication port
      - "8081:8081" # Unifi communication port
      - "8443:8443" # UI
      - "8843:8843" # Unifi communication port
      - "8880:8880" # Unifi communication port
      - "6789:6789" # For throughput test
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      traefik.backend: unifi
      traefik.port: 8443
      traefik.frontend.rule: Host:unifi.${ROOT_DOMAIN}
      traefik.frontend.headers.SSLRedirect: true
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.browserXSSFilter: true
      traefik.frontend.headers.contentTypeNosniff: true
      traefik.frontend.headers.forceSTSHeader: true
      traefik.frontend.headers.STSIncludeSubdomains: true
      traefik.frontend.headers.STSPreload: true
      traefik.frontend.headers.frameDeny: true
      traefik.frontend.auth.forward.address: http://oauth:4181
      traefik.frontend.auth.forward.authResponseHeaders: X-Forwarded-User
      traefik.frontend.auth.forward.trustForwardHeader: true

  # https://github.com/linuxserver/docker-tt-rss
  tinyrss:
    # https://hub.docker.com/r/linuxserver/tt-rss/
    image: linuxserver/tt-rss
    container_name: tinyrss
    restart: unless-stopped
    networks:
      - traefik_proxy
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
    volumes:
      - ${APPDATA_DIR}/tinyrss:/config
    ports:
      - "8082:80"
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      traefik.backend: tinyrss
      # traefik.port: 8082
      traefik.docker.usebindportip: true
      traefik.frontend.rule: Host:rss.${ROOT_DOMAIN}
      traefik.frontend.headers.SSLRedirect: true
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.browserXSSFilter: true
      traefik.frontend.headers.contentTypeNosniff: true
      traefik.frontend.headers.forceSTSHeader: true
      traefik.frontend.headers.STSIncludeSubdomains: true
      traefik.frontend.headers.STSPreload: true
      traefik.frontend.headers.frameDeny: true
      traefik.frontend.auth.forward.address: http://oauth:4181

  tinyrss_db:
    image: postgres:10.1
    container_name: tinyrss_db
    restart: unless-stopped
    networks:
      - traefik_proxy
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - POSTGRES_DB=tinyrss
      - POSTGRES_USER=${TINYRSS_POSTGRES_USER}
      - POSTGRES_PASSWORD=${TINYRSS_POSTGRES_PASS}
    volumes:
      - ${STORAGE_DIR}/db/tinyrss:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # https://github.com/linuxserver/docker-code-server
  codeserver:
    # https://hub.docker.com/r/linuxserver/code-server/
    image: linuxserver/code-server
    container_name: codeserver
    restart: unless-stopped
    networks:
      - traefik_proxy
    environment:
      - PGID=${PGID}
      - PUID=${PUID}
      - TZ=${TZ}
      - SUDO_PASSWORD=${CODE_SERVER_SUDO_PASSWORD} # optional
    volumes:
      - ${APPDATA_DIR}/codeserver:/config
    ports:
      - "8442:8443"
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      # https://docs.traefik.io/configuration/backends/docker/#usebindportip
      traefik.docker.usebindportip: true
      traefik.backend: codeserver
      traefik.frontend.rule: Host:code.${ROOT_DOMAIN}
      traefik.frontend.headers.SSLRedirect: true
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.browserXSSFilter: true
      traefik.frontend.headers.contentTypeNosniff: true
      traefik.frontend.headers.forceSTSHeader: true
      traefik.frontend.headers.STSIncludeSubdomains: true
      traefik.frontend.headers.STSPreload: true
      traefik.frontend.headers.frameDeny: true
      traefik.frontend.auth.forward.address: http://oauth:4181
      traefik.frontend.auth.forward.authResponseHeaders: X-Forwarded-User
      traefik.frontend.auth.forward.trustForwardHeader: true
