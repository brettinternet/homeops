---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  BOOTSTRAP_TALOS_DIR: "{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos"
  TALHELPER_CLUSTER_DIR: "{{.BOOTSTRAP_TALOS_DIR}}/clusterconfig"
  TALHELPER_SECRET_FILE: "{{.BOOTSTRAP_TALOS_DIR}}/talsecret.sops.yaml"
  TALHELPER_CONFIG_FILE: "{{.BOOTSTRAP_TALOS_DIR}}/talconfig.yaml"
  HELMFILE_FILE: "{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/helmfile.yaml"
  TALOSCONFIG_FILE: "{{.TALHELPER_CLUSTER_DIR}}/talosconfig"

env:
  TALOSCONFIG: "{{.TALOSCONFIG_FILE}}"

tasks:
  bootstrap:
    desc: Bootstrap the Talos cluster
    dir: "/{{.BOOTSTRAP_TALOS_DIR}}"
    cmds:
      - |
        if [ ! -f "{{.TALHELPER_SECRET_FILE}}" ]; then
            talhelper gensecret > {{.TALHELPER_SECRET_FILE}}
            sops --encrypt --in-place {{.TALHELPER_SECRET_FILE}}
        fi
      - talhelper genconfig --config-file {{.TALHELPER_CONFIG_FILE}} --secret-file {{.TALHELPER_SECRET_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}}
      - talhelper gencommand apply --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="--insecure" | bash
      - until talhelper gencommand bootstrap --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} | bash; do sleep 10; done
      - task: fetch-kubeconfig
      - task: install-helm-apps
      - task: health
    requires:
      vars: ["cluster"]
    preconditions:
      - msg: Missing talhelper config file
        sh: test -f {{.TALHELPER_CONFIG_FILE}}
      - msg: Missing Sops config file
        sh: test -f {{.SOPS_CONFIG_FILE}}
      - msg: Missing Sops Age key file
        sh: test -f {{.AGE_FILE}}

  health:
    desc: Get Talos cluster health
    dir: "/{{.BOOTSTRAP_TALOS_DIR}}"
    cmd: "talosctl health --server=false"
    requires:
      vars: ["cluster"]
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG_FILE}}

  fetch-kubeconfig:
    desc: Fetch kubeconfig
    dir: "/{{.BOOTSTRAP_TALOS_DIR}}"
    cmds:
      - until talhelper gencommand kubeconfig --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="{{.ROOT_DIR}} --force" | bash; do sleep 10; done
      - |-
        CLUSTER_NAME="$(yq 'select(document_index == 0).clusterName' {{.TALHELPER_CONFIG_FILE}})"
        kubectl config rename-context admin@$CLUSTER_NAME {{.cluster}} || true
        kubectl config use-context {{.cluster}}
        kubectl config unset contexts.{{.cluster}}.namespace
        kubectl config delete-context admin@$CLUSTER_NAME || true
    requires:
      vars: ["cluster"]
    preconditions:
      - msg: Missing talhelper config file
        sh: test -f {{.TALHELPER_CONFIG_FILE}}

  install-helm-apps:
    desc: Bootstrap core apps needed for Talos
    dir: "/{{.BOOTSTRAP_TALOS_DIR}}"
    cmds:
      - until kubectl --kubeconfig {{.KUBECONFIG_FILE}} wait --for=condition=Ready=False nodes --all --timeout=600s; do sleep 10; done
      - helmfile --kubeconfig {{.KUBECONFIG_FILE}} --file {{.HELMFILE_FILE}} apply --skip-diff-on-install --suppress-diff
      - until kubectl --kubeconfig {{.KUBECONFIG_FILE}} wait --for=condition=Ready nodes --all --timeout=600s; do sleep 10; done
    requires:
      vars: ["cluster"]
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}
      - msg: Missing helmfile
        sh: test -f {{.HELMFILE_FILE}}

  # upgrade multiple with same image when node IP is sequential
  # for x in {0..6}; do task talos:upgrade cluster=main image=factory.talos.dev/installer/xxx:v1.7.4 node=10.1.2.10$x; done
  upgrade:
    desc: Upgrade Talos on a node
    dir: "/{{.BOOTSTRAP_TALOS_DIR}}"
    cmds:
      - "talosctl --nodes {{.node}} upgrade --image {{.image}} --wait=true --timeout=10m --preserve=true --reboot-mode={{.mode}}"
      # - "talosctl --nodes {{.node}} health --wait-timeout=10m --server=false"
    vars:
      mode: '{{.mode | default "default"}}'
    requires:
      vars: ["cluster", "node", "image"]
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG_FILE}}
      - msg: Unable to retrieve Talos config
        sh: "talosctl config info >/dev/null 2>&1"
      - msg: Node not found
        sh: "talosctl --nodes {{.node}} get machineconfig >/dev/null 2>&1"

  upgrade-k8s:
    desc: Upgrade Kubernetes across the cluster
    dir: "/{{.BOOTSTRAP_TALOS_DIR}}"
    cmd: "talosctl --nodes {{.controller}} upgrade-k8s --to {{.to}}"
    requires:
      vars: ["cluster", "controller", "to"]
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG_FILE}}
      - msg: Unable to retrieve Talos config
        sh: "talosctl config info >/dev/null 2>&1"
      - msg: Node not found
        sh: "talosctl --nodes {{.controller}} get machineconfig >/dev/null 2>&1"

  run:
    desc: Run talos command
    dir: "/{{.BOOTSTRAP_TALOS_DIR}}"
    cmd: "talosctl {{.CLI_ARGS}}"
    requires:
      vars: ["cluster"]
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG_FILE}}
      - msg: Unable to retrieve Talos config
        sh: "talosctl config info >/dev/null 2>&1"

  support:
    desc: Run talos command
    dir: "/{{.BOOTSTRAP_TALOS_DIR}}"
    cmd: "talosctl support -n {{.node}} -O {{.ROOT_DIR}}"
    requires:
      vars: ["cluster", "node"]
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG_FILE}}
      - msg: Unable to retrieve Talos config
        sh: "talosctl config info >/dev/null 2>&1"

  destroy:
    desc: Resets nodes back to maintenance mode
    dir: "/{{.BOOTSTRAP_TALOS_DIR}}"
    prompt: This will destroy your cluster and reset the nodes back to maintenance mode... continue?
    cmd: talhelper gencommand reset --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="--reboot {{- if eq .CLI_FORCE false }} --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL{{ end }} --graceful=false --wait=false" | bash
    requires:
      vars: ["cluster"]
