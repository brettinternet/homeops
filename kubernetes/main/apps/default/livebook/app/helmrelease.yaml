---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app livebook
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      livebook:
        # type: statefulset
        replicas: 3
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/livebook-dev/livebook
              tag: edge
            env:
              TZ: "${TIMEZONE}"
              # LIVEBOOK_DEBUG: true
              LIVEBOOK_PORT: &port 8080
              LIVEBOOK_APP_SERVICE_URL: "https://livebook.${SECRET_EXTERNAL_DOMAIN}"
              LIVEBOOK_TOKEN_ENABLED: false
              # https://hexdocs.pm/livebook/docker.html#clustering
              # https://github.com/livebook-dev/livebook/discussions/2641
              LIVEBOOK_CLUSTER: dns:livebook-headless.default.svc.cluster.local
              LIVEBOOK_DISTRIBUTION: name
              POD_IP:
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: status.podIP
            envFrom:
              - secretRef:
                  name: livebook
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /public/health
                    port: *port
                  initialDelaySeconds: 10
                  periodSeconds: 10
                  timeoutSeconds: 10
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
              limits:
                cpu: 500m
                memory: 1Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [10000]
        seccompProfile: { type: RuntimeDefault }
    service:
      app:
        controller: *app
        ports:
          http:
            port: *port
    ingress:
      app:
        className: external
        annotations:
          external-dns.alpha.kubernetes.io/target: "external.${SECRET_EXTERNAL_DOMAIN}"
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Services
          gethomepage.dev/name: Livebook
          gethomepage.dev/icon: mdi-book
        hosts:
          - host: "livebook.${SECRET_EXTERNAL_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
      public:
        className: external
        annotations:
          external-dns.alpha.kubernetes.io/target: "external.${SECRET_EXTERNAL_DOMAIN}"
        hosts:
          - host: "livebook.${SECRET_EXTERNAL_DOMAIN}"
            paths:
              - path: /public
                service:
                  identifier: app
                  port: http
    persistence:
      data:
        existingClaim: livebook
      env:
        type: configMap
        name: livebook-config
        globalMounts:
          - subPath: env.sh
            path: /app/user/env.sh
            readOnly: true
