---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: grafana
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: grafana
      version: 6.38.0
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  dependsOn:
    - name: grafana-postgres
      namespace: monitoring
  # https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
  values:
    replicas: 1
    admin:
      existingSecret: grafana
      userKey: GF_SECURITY_ADMIN_USER
      passwordKey: GF_SECURITY_ADMIN_PASSWORD
    env:
      # https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_DATABASE_HOST: grafana-postgres.monitoring.svc.cluster.local:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: grafana
      GF_DATABASE_SSL_MODE: disable
      GF_DATABASE_TYPE: postgres
      GF_DATE_FORMATS_FULL_DATE: "MMM Do, YYYY hh:mm:ss a"
      GF_EXPLORE_ENABLED: true
      GF_GRAFANA_NET_URL: https://grafana.net
      GF_LOG_FILTERS: rendering:debug
      GF_LOG_MODE: console
      GF_PANELS_DISABLE_SANITIZE_HTML: true
      GF_PATHS_DATA: /var/lib/grafana/data
      GF_PATHS_LOGS: /var/log/grafana
      GF_PATHS_PLUGINS: /var/lib/grafana/plugins
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_SECURITY_COOKIE_SAMESITE: grafana
      GF_SERVER_ROOT_URL: "https://grafana.${PUBLIC_DOMAIN}"
    envFromSecrets:
      - name: grafana
    grafana.ini:
      auth:
        signout_redirect_url: "https://auth.${PUBLIC_DOMAIN}/logout"
        oauth_auto_login: false
      auth.generic_oauth:
        enabled: true
        name: Authelia
        client_id: grafana
        client_secret: "${GRAFANA_OAUTH_CLIENT_SECRET}"
        scopes: "openid profile email groups"
        empty_scopes: false
        auth_url: "https://auth.${PUBLIC_DOMAIN}/api/oidc/authorization"
        token_url: "https://auth.${PUBLIC_DOMAIN}/api/oidc/token"
        api_url: "https://auth.${PUBLIC_DOMAIN}/api/oidc/userinfo"
        login_attribute_path: preferred_username
        groups_attribute_path: groups
        name_attribute_path: name
        use_pkce: true
      auth.generic_oauth.group_mapping:
        role_attribute_path: |
          contains(groups[*], 'admins') && 'Admin' || contains(groups[*], 'people') && 'Viewer'
        org_id: 1
      auth.basic:
        enabled: false
        # disable_login_form: false
      auth.anonymous:
        enabled: true
        org_name: Home
        org_id: 1
        org_role: Viewer
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: "default"
            orgId: 1
            folder: ""
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
    datasources:
      datasources.yaml:
        apiVersion: 1
        deleteDatasources:
          # - name: Loki
          #   orgId: 1
        datasources:
          - name: Prometheus
            type: prometheus
            access: proxy
            url: http://thanos-query.monitoring.svc.cluster.local:9090
            isDefault: true
          # - name: Loki
          #   type: loki
          #   access: proxy
          #   url: http://loki-gateway.monitoring.svc.cluster.local:80
    # dashboards:
    #   default:
    #     # Ref: https://grafana.com/grafana/dashboards/7845
    #     zfs:
    #       gnetId: 7845
    #       revision: 4
    #       datasource: Prometheus
    #     # Ref: https://grafana.com/grafana/dashboards/13502
    #     minio:
    #       gnetId: 13502
    #       revision: 10
    #       datasource: Prometheus
    sidecar:
      dashboards:
        enabled: true
        searchNamespace: ALL
        # folderAnnotation: grafana_folder
        # provider:
        #   foldersFromFilesStructure: true
      datasources:
        enabled: true
        searchNamespace: ALL
    plugins:
      - natel-discrete-panel
      - pr0ps-trackmap-panel
      - grafana-piechart-panel
      - vonage-status-panel
      - grafana-worldmap-panel
      - grafana-clock-panel
    serviceMonitor:
      enabled: false
    ingress:
      enabled: true
      ingressClassName: "nginx"
      annotations:
        external-dns.home.arpa/enabled: "true"
      hosts:
        - &host "grafana.${PUBLIC_DOMAIN}"
      tls:
        - hosts:
            - *host
    persistence:
      enabled: false
      inMemory:
        enabled: true

---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: grafana-postgres
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 0.2.2
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 3
  values:
    image:
      repository: library/postgres
      tag: "14"
    env:
      - name: POSTGRES_USER
        value: grafana
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: grafana
            key: GF_DATABASE_PASSWORD
      - name: POSTGRES_DB
        value: grafana
      - name: PGDATA
        value: /var/lib/postgresql/data
    podSecurityContext:
      runAsUser: "${SECURITY_CONTEXT_RUN_AS_USER}"
      runAsGroup: "${SECURITY_CONTEXT_RUN_AS_GROUP}"
      fsGroup: "${SECURITY_CONTEXT_FS_GROUP}"
    service:
      main:
        enabled: true
        ports:
          http:
            enabled: false
            primary: false
          sql:
            enabled: true
            primary: true
            port: 5432
            protocol: TCP
    persistence:
      data:
        enabled: true
        mountPath: /var/lib/postgresql/data
        existingClaim: appdata
        subPath: grafana_db
