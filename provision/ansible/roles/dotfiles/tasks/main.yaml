---
- name: Check supported distribution
  ansible.builtin.fail:
    msg:
      - "Unsupported distribution: {{ ansible_facts['distribution'] | lower }}"
      - This role only supports Arch Linux
  when: ansible_facts['distribution'] | lower != 'archlinux'

- name: Install packages
  ansible.builtin.package:
    state: latest
    name:
      - git
      - vim
      - tmux
      - zsh
      - bat
      - lsd

- name: Install AUR dependencies
  ansible.builtin.include_role:
    name: aur
  vars:
    state: latest
    packages:
      - vim-plug

- name: Check for 'dotfiles_repo' definition
  ansible.builtin.fail:
    msg:
      - "'dotfiles_repo' must be defined"
  when: dotfiles_repo is not defined

- name: Clone dotfiles repo # noqa git-latest
  become_user: "{{ ansible_user }}"
  ansible.builtin.git:
    repo: "{{ dotfiles_repo }}"
    dest: "{{ dotfiles_dir }}"
    accept_hostkey: true
    update: true
    depth: 1

- name: "Setup user groups, set user shell to {{ shell }}"
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    shell: "{{ shell }}"
    groups:
      - wheel
      - sudo
      - ssh

- name: Setup dotfiles with install command # noqa no-changed-when
  become_user: "{{ ansible_user }}"
  ansible.builtin.command:
    chdir: "{{ dotfiles_dir }}"
    cmd: "{{ dotfiles_install_cmd }}"
  register: dotbot_setup_result
  failed_when: dotbot_setup_result.stderr != ""

- name: Debug dotfile setup log
  ansible.builtin.debug:
    msg: "{{ dotbot_setup_result.stdout.split('\n') }}"

- name: Debug dotfile setup errors
  ansible.builtin.debug:
    msg: "{{ dotbot_setup_result.stderr.split('\n') }}"
  when: dotbot_setup_result.stderr | length > 0

- name: Install/update/clean vim plugins # noqa no-changed-when
  become_user: "{{ ansible_user }}"
  ansible.builtin.shell: vim -E -s -c "source ~/.vimrc" +PlugClean! +PlugUpdate +visual +qall
  register: plugupdate_result
  failed_when: plugupdate_result.stderr != ""

- block:
    - name: Add private environment values
      become_user: "{{ ansible_user }}"
      ansible.builtin.lineinfile:
        path: "{{ default_direnv_file }}"
        line: "{{ item }}"
        state: present
      loop: "{{ default_direnv_lines }}"

    - name: Check dirnev binary exists
      ansible.builtin.stat:
        path: /usr/bin/direnv
      register: direnv_result

    - name: Allow user directory direnv
      become_user: "{{ ansible_user }}"
      ansible.builtin.shell:
        # include .zshrc if it exists since direnv is installed by zinit
        cmd: |
          if [ -f "$HOME/.zshrc" ]; then
            . "$HOME/.zshrc"
          fi
          direnv allow ~
        executable: /bin/zsh
      when: not direnv_result.stat.exists
  when:
    - default_direnv_lines is defined
    - default_direnv_lines | length > 0

# https://wiki.archlinux.org/index.php/Zsh#Persistent_rehash
- name: Rehash zsh $PATH
  become_user: "{{ ansible_user }}"
  ansible.builtin.shell:
    cmd: |
      if [[ "$SHELL" = *"zsh" ]]; then
        REHASH_FILE=$HOME/.cache/zsh/rehash
        mkdir -p "${REHASH_FILE%/*}"
        /usr/bin/touch -m "$REHASH_FILE"
      else
        echo "Skipping...current shell is $SHELL"
      fi
    executable: /bin/zsh
  when: ansible_facts['user_shell'] == '/usr/bin/zsh'
